# Copyright 2025 LoÃ¯c Muhirwa
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Response schemas for the root agent API.

This module defines the Pydantic models for API responses.
"""

from __future__ import annotations

from typing import Any, Dict, Optional

from pydantic import BaseModel, Field


class AgentDiagram(BaseModel):
    """Represents a diagram generated by the agent."""

    diagram_code: str = Field(..., description='Mermaid diagram code')
    diagram_type: str = Field(
        default='mermaid', description='Type of diagram (e.g., mermaid)'
    )
    title: Optional[str] = Field(None, description='Title of the diagram')
    description: Optional[str] = Field(None, description='Description of the diagram')


class AgentResponse(BaseModel):
    """Represents the agent's response to a user query."""

    response: str = Field(..., description="The agent's text response")
    diagram: Dict[str, Any] = Field(
        default_factory=dict,
        description='Architecture diagram generated by the agent',
    )
    session_id: Optional[str] = Field(None, description='Session identifier')
    model: Optional[str] = Field(None, description='Model used for this response')
    confidence: Optional[float] = Field(
        None, ge=0.0, le=1.0, description='Confidence score of the response'
    )

    class Config:
        """Pydantic configuration."""

        json_schema_extra = {
            'example': {
                'response': (
                    'Here is the system architecture showing how data flows '
                    'through the processing pipeline.'
                ),
                'diagram': {
                    'diagram_code': 'graph TD\n    A[Input] --> B[Process]',
                    'diagram_type': 'mermaid',
                    'title': 'System Architecture',
                    'description': 'Data flow diagram',
                },
                'session_id': 'abc123-def456-ghi789',
                'model': 'gemini-2.5-pro',
                'confidence': 0.95,
            }
        }
